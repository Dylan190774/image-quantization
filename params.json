{"name":"image-quantization","tagline":"Image Quantization Library with alpha support (based on https://github.com/leeoniya/RgbQuant.js, https://github.com/timoxley/neuquant and http://www.ece.mcmaster.ca/~xwu/cq.c)","body":"IQ.ts\r\n-----\r\nImage Quantization Library in **TypeScript** _(MIT Licensed)_\r\n![quantization](https://raw.githubusercontent.com/leeoniya/RgbQuant.js/master/quantization.png \"quantization\")\r\n\r\nIntroduction\r\n------------\r\nThis color quantization library was created because I was unable to find high-grade image quantization library with alpha support in TypeScript on the internet.\r\n \r\n[API](http://igor-bezkrovny.github.io/image-quantization/doc)  \r\n[Online Demo](http://igor-bezkrovny.github.io/image-quantization-demo)  \r\n[Demo Source](https://github.com/igor-bezkrovny/igor-bezkrovny.github.io/image-quantization-demo)\r\n\r\nUsage\r\n-----\r\nAll usage is shown in JavaScript, it will be mostly the same for TypeScript. `img` should be valid already-loaded image.\r\n\r\n##### Load Image (simple example)\r\n```javascript\r\nvar img = document.createElement(\"img\");\r\nimg.onload = function() {\r\n\t// image is loaded, here should be all code utilizing image\r\n\t...\r\n}\r\nimg.src = \"http://pixabay.com/static/uploads/photo/2012/04/11/11/32/letter-a-27580_640.png\"\r\n```\r\n\r\n##### Generate Palette   \r\n```javascript\r\n// desired colors count\r\nvar targetColors = 256;\r\n   \r\n// create pointContainer and fill it with image\r\nvar pointContainer = IQ.Utils.PointContainer.fromHTMLImageElement(img);\r\n\r\n// create chosen distance calculator (see classes implementing `IQ.IDistanceCalculator`)\r\nvar distanceCalculator = new IQ.Distance.DistanceEuclidean();\r\n\r\n// create chosen palette quantizer (see classes implementing `IQ.IPaletteQuantizer`) \r\nvar paletteQuantizer = new IQ.Palette.RgbQuant(distanceCalculator, targetColors);\r\n\t\t\r\n// feed out pointContainer filled with image to paletteQuantizer\r\npaletteQuantizer.sample(pointContainer);\r\n\r\n... (you may sample more than one image to create mutual palette) \r\n\r\n// take generated palette\r\nvar palette = paletteQuantizer.quantize();\r\n```\r\n\r\n##### Apply Palette to Image (Image Dithering) \r\n```javascript\r\n// create image ditherer (see classes implementing `IQ.IImageDitherer`)\r\nvar imageDitherer = new IQ.Image.NearestColor(distanceCalculator);\r\n\r\n// take generated image using given palette \r\nvar resultPointContainer = imageQuantizer.quantize(pointContainer, palette);\r\n```\r\n\r\nYou may work with resultPointContainer directly or you may convert it to `Uint8Array`/`Uint32Array`\r\n```javascript\r\nvar uint8array = resultPointContainer.toUint8Array();\r\n```\r\n\r\nPalette Quantization Algorithms\r\n-------------------------------\r\n\r\nImage Quantization Library is based **RgbQuant** by Leon Sorokin and **NeuQuant** by Tim Oxley (see below).\r\n\r\n1. [RgbQuant (Leon Sorokin)](https://github.com/leeoniya/RgbQuant.js) `JavaScript`\r\n2. [NeuQuant (Johan Nordberg)](https://github.com/jnordberg/gif.js/blob/master/src/TypedNeuQuant.js) `TypeScript`\r\n3. [NeuQuant (Tim Oxley)](https://github.com/timoxley/neuquant) `JavaScript`\r\n4. [NeuQuant (Devon Govett)](https://github.com/devongovett/neuquant) `JavaScript`\r\n5. [NeuQuant32 (Stuart Coyle)](https://github.com/stuart/pngnq/blob/master/src/neuquant32.c) `C`\r\n6. [Xiaolin Wu (Xiaolin Wu)](http://www.ece.mcmaster.ca/~xwu/cq.c) `C` \r\n7. [Xiaolin Wu (Smart-K8)](http://www.codeproject.com/Articles/66341/A-Simple-Yet-Quite-Powerful-Palette-Quantizer-in-C) `C#`\r\n8. Xiaolin Wu w/ Alpha (Matt Wrock) [How to add Alpha](https://code.msdn.microsoft.com/windowsdesktop/Convert-32-bit-PNGs-to-81ef8c81/view/SourceCode#content), [Source Code](https://nquant.codeplex.com) `C#`\r\n9. [MedianCut (mwcz)](https://github.com/mwcz/median-cut-js) `GPLv3`\r\n> all NeuQuant implementations above are based on Anthony Dekker's implementation and thus needs to save his original copyright notice in the source code\r\n\r\nImage Quantization Algorithms\r\n-----------------------------\r\nImage Quantization Library supports **Error Diffusion dithering** and **Nearest Neighbour** methods. \r\n\r\n1. [All (ImageMagik doc)](http://www.imagemagick.org/Usage/quantize/#dither)\r\n2. [Error Diffusion dithering (Tanner Helland)](http://www.tannerhelland.com/4660/dithering-eleven-algorithms-source-code)\r\n3. [Riemersma dithering](http://www.compuphase.com/riemer.htm) `TODO: Check License`\r\n4. [Ordered dithering (Joel Yliluoma)](http://bisqwit.iki.fi/story/howto/dither/jy)\r\n\r\nColor Distance Formulas\r\n-----------------------\r\nImage Quantization Library supports: \r\n\r\n1. Euclidean Distance\r\n2. Manhattan Distance\r\n3. CIE94 Distance\r\n   - [Source Code (Iulius Curt)](https://github.com/iuliux/CIE94.js)\r\n4. CIEDE2000\r\n   - [Math and Test Data Table (PDF)](http://www.ece.rochester.edu/~gsharma/ciede2000/ciede2000noteCRNA.pdf) \r\n   - [Source Code (Greg Fiumara)](https://github.com/gfiumara/CIEDE2000) `C` \r\n5. Euclidean Distance w/o Alpha (RgbQuant)\r\n6. Euclidean Distance w/o sRGB coefficients (Xiaolin Wu Quant)  \r\n7. Manhattan Distance w/o sRGB coefficients (NeuQuant)\r\n8. [CMETRIC](http://www.compuphase.com/cmetric.htm) `DRAFT!`\r\n\r\nColor conversion formulas\r\n-------------------------\r\n1. [Pseudo-code](http://www.easyrgb.com/?X=MATH)\r\n\r\n> Be sure to fix rgb2xyz/xyz2lab. Issue is with strange part of code: `r = r > 0.04045 ? ...`. Check http://en.wikipedia.org/wiki/Lab_color_space   \r\n\r\nImage Quality Assessment\r\n------------------------\r\n\r\n1. [SSIM info](http://en.wikipedia.org/wiki/Structural_similarity)\r\n2. [SSIM (Rhys-e)](https://github.com/rhys-e/structural-similarity) `Java` `License: MIT`\r\n3. PSNR ? TBD\r\n4. MSE ? TBD\r\n\r\nOther\r\n-----\r\n\r\n1. [HUSL (Boronine) - info](http://www.husl-colors.org)\r\n2. [HUSL (Boronine) - code](https://github.com/husl-colors/husl)\r\n\r\nTODO\r\n----\r\n1. notification about progress\r\n2. riemersma dithering\r\n\r\nChangelog\r\n---------\r\n\r\n##### 0.1.2 (2015-06-16)\r\n+ Documentation generation fixed\r\n+ File name case problem fixed\r\n\r\n##### 0.1.1 (2015-06-16)\r\n+ Auto-generated documentation added\r\n+ Refactoring \r\n\r\n##### 0.1.0 (2015-06-16)\r\n+ Code cleanup, removed unnecessary files\r\n\r\n##### 0.0.5 (2015-06-16)\r\n+ PNGQUANT color distance added, need to check its quality\r\n+ CIEDE2000 and CIE94 fixed for use in NeuQuant\r\n+ NeuQuant is fixed according to original Anthony Dekker source code (all values should be integer) \r\n+ Code refactoring and cleanup\r\n* We have some slowdown because of red/green/blue/alpha normalization according to white point per each calculateRaw/calculateNormalized call \r\n\r\n##### 0.0.4 (2015-06-15)\r\n+ CIEDE2000 color distance equation optimized (original CIEDE2000 equation is available as class `CIEDE2000_Original`) \r\n\r\n##### 0.0.3b (2015-06-11)\r\n+ CMETRIC color distance fixed\r\n\r\n##### 0.0.3a (2015-06-11)\r\n+ Cleanup\r\n+ Draft of CMETRIC color distance added\r\n\r\n##### 0.0.2 (2015-06-10)\r\n+ rgb2xyz & xyz2lab fixed. CIEDE2000 works much better now.\r\n+ CIE94 distance formula added. More investigation is needed.\r\n\r\n##### 0.0.1\r\n+ Initial\r\n\r\nLicense\r\n-------\r\nLicense MIT [(NeuQuant use also forces to add it's copyright notice into source code)](./src/paletteQuantizers/neuquant/neuquant.ts)\r\n  \r\nCredits\r\n-------\r\nThanks to Leon Sorokin for information share and his original RgbQuant!\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}